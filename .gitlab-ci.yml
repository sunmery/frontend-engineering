stages:
  - init
  - test
  - build
  - manifests
  - deploy
  - verify

variables:
  # 是否需要初始化, 初始化的工作包含拉取和构建运行Web应用的镜像
  FRONTEND_INIT: "false"
  # 是否需要初始化, 初始化的工作包含创建argo的proj
  BACKEND_INIT: "true"

  # Web目录, 在远程服务器存在的目录
  NGINX_DIR: /home/nginx
  # 项目名称
  PROJECT_NAME: backend
  # 版本号
  TAG_VERSION: ${CI_COMMIT_TAG}
  # 标签
  IMAGE_TAG: "backend"
  # 运行前端的runner tag
  FRONTEND_RUNNER: "node"
  # 运行后端的runner tag
  BACKEND_RUNNER: "go"
  # 运行Docker的runner tag
  DOCKER_RUNNER_TAG: "docker"
  # 客户端项目名称
  PROJECT_NAME_CLIENT: "frontend"
  # 服务端项目名称
  PROJECT_NAME_SERVER: "backend"

  # 当使用dind服务时，你必须指示docker与服务内部启动的daemon对话。
  # 这个守护进程可以通a网络连接来使用，而不是默认的/var/run/docker套接字。
  # 如果你使用的是GitLab Runner 12.7或更早版本的Kubernetes执行器和Kubernetes 1.6或更早版本，由于
  # Kubernetes执行器的连接方式，该变量必须设置为tcp://localhost:2375
  DOCKER_HOST: "tcp://docker:2375"
  # 这指示Docker不要重新启动TLS。如果远程注册表不是HTTPS, 就填写
  DOCKER_TLS_CERTDIR: ""

cache:
  key: nginx-quic
  paths:
    - frontend/node_modules

.docker_login_template:
  #  variables:
  #    FF_NETWORK_PER_BUILD: "true"
  # 建议与你注册Runner选择的Docker镜像一致
  image: docker:26.1.0-dind-alpine3.19
  services:
    # 建议与你注册Runner选择的Docker镜像一致
    - docker:26.1.0-dind-alpine3.19
  before_script:
    - echo "正在查看Docker 信息"
    - docker info
    - echo "正在登录到远程注册表"
    - docker login $REGISTER_ADDRESS -u $REGISTER_USERNAME -p $REGISTER_PASSWORD

.argocd_login_template:
  before_script:
    - echo "正在登录Argocd服务器"
    - >
      argocd login ${ARGO_SERVER} 
      --username ${ARGO_USER} 
      --password ${ARGO_PASS}
      --insecure


#job_frontend_test:
#  stage: test
#  image: node:18-alpine
#  tags:
#    - node
#  before_script:
#    - cd frontend
#    - npm install -g pnpm
#    - rm -rf node_modules
#  script:
#    - pnpm i
#    - pnpm lint
#  after_script:
#    - |
#      if [ $? -ne 0 ]; then
#        echo "测试失败
#        exit 1
#      fi
#  only:
#    - main
#    - dev

job_backend_test:
  stage: test
  image: golang:1.22.2-alpine3.19
  tags:
    - go
  before_script:
    - cd backend
  script:
    - go test ./...
  after_script:
    - |
      if [ $? -ne 0 ]; then
        echo "测试失败
        exit 1
      fi
  only:
    - main

job_backend_build:
  stage: build
  extends:
    - .docker_login_template
  before_script:
    - |
      if [ -n "$TAG_VERSION" ]; then
       echo "当前Pipeline基于的Git Tag版本号为: $TAG_VERSION"
      else
      echo "本次Pipeline不是由Git Tag触发，没有Tag版本号。"
      fi
  script:
    - >
      docker build
      -t $IMAGE_TAG:$VERSION
      -f backend/Dockerfile backend
      --build-arg GO_IMAGE=golang:1.22.2-alpine3.19
      --build-arg ARCH=amd64
      --build-arg CGO_ENABLED=0
      --build-arg UID=10001
    - docker tag $IMAGE_TAG:$VERSION $REGISTER_ADDRESS/$REGISTER_REPO/$PROJECT_NAME_SERVER:$VERSION
    - docker push $REGISTER_ADDRESS/$REGISTER_REPO/$PROJECT_NAME_SERVER:$VERSION
  after_script:
    - docker images
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'

job_create_argo_proj:
  stage: init
  image: ccr.ccs.tencentyun.com/lisa/alpine:latest
  extends:
    - .argocd_login_template
  before_script:
    - sshpass -e scp -o stricthostkeychecking=no deploy/frontend/kubernetes/argocd/create-frontend-proj.yml ${s_user}@${s_host1}:/tmp/
    - sshpass -e scp -o stricthostkeychecking=no deploy/backend/kubernetes/argocd/create-backend-proj.yml ${s_user}@${s_host1}:/tmp/
  script:
    - sshpass -e ssh -o stricthostkeychecking=no ${s_user}@${s_host1} '
      argocd proj create -f /tmp/create-frontend-proj.yml;
      argocd proj create -f /tmp/create-backend-proj.yml;
      argocd proj list;
      '
  after_script:
    - sshpass -e ssh -o stricthostkeychecking=no ${s_user}@${s_host1} '
      rm -rf /tmp/create-frontend-proj.yml;
      rm -rf /tmp/create-backend-proj.yml
      '
  only:
    variables:
      - $BACKEND_INIT == "true"

job_manifests:
  stage: manifests
  image: ccr.ccs.tencentyun.com/lisa/alpine:git
  before_script:
    - which ssh-agent || apk update && apk add openssh-client
    - mkdir -p /root/.ssh
    - echo $SSH_PRIVATE_KEY > /root/.ssh/id_ed25519
    - chmod 600 /root/.ssh/id_ed25519
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts || true
    - chmod 644 ~/.ssh/known_hosts
    # run ssh-agent
    - eval $(ssh-agent -s)
    # add ssh key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add /root/.ssh/id_ed25519
    # Git
    - git config --global user.email gitlab-ci@gmail.com
    - git config --global user.name gitlab-ci
    - git clone git@gitlab.com:lookeke/manifests.git
    - cd manifests
    - ls -latr
  script:
    # Update Image TAG
    - sed -i "s/image:.*/image:${TAG_VERSION}/g" full-stack-engineering/backend/deployment.yml
    - git add full-stack-engineering/backend/deployment.yml
    - git commit -am "Update Image"
    - git push
  only:
    - dev
    - main

job_deploy:
  stage: deploy
  image: ccr.ccs.tencentyun.com/lisa/alpine:latest
  extends:
    - .argocd_login_template
  before_script:
    - sshpass -e scp -o stricthostkeychecking=no deploy/frontend/kubernetes/argocd/create-frontend-app.yml ${s_user}@${s_host1}:/tmp/
    - sshpass -e scp -o stricthostkeychecking=no deploy/backend/kubernetes/argocd/create-backend-app.yml ${s_user}@${s_host1}:/tmp/
  script:
    - sshpass -e ssh -o stricthostkeychecking=no ${s_user}@${s_host1} '
      argocd app create -f /tmp/create-frontend-app.yml;
      argocd app create -f /tmp/create-backend-app.yml;
      argocd app list;
      '
  after_script:
    - sshpass -e ssh -o stricthostkeychecking=no ${s_user}@${s_host1} '
      rm -rf /tmp/application-frontend.yml;
      rm -rf /tmp/application-backend.yml
      '
  only:
    - main
    - dev

job_verify:
  stage: verify
  image: ccr.ccs.tencentyun.com/lisa/alpine
  before_script:
    - apk add curl
  script:
    - curl -L https://${s_host1}
    - curl -L http://${s_host1}:30001/helloworld/lisa
    - curl -L http://${s_host1}:30002/helloworld/lisa
  only:
    - main
    - dev
